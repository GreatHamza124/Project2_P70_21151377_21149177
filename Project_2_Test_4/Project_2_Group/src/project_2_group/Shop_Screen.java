/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package project_2_group;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Hamza
 */
public class Shop_Screen extends javax.swing.JFrame {
    String[] arrayCategories;

    /**
     * Creates new form CategoryFrame_test
     */
    public Shop_Screen() {
        initComponents();
        category_list();
        table_adjustments();
    }
    
    //Retrieves a list of distinct categories from the database and populates them in a JComboBox (category_list).
    public void category_list(){
        ResultSet category_query = MainProgram.shop_items.executeQuery("SELECT DISTINCT category FROM Shop");
        ArrayList<String> categories = new ArrayList<>();
        categories.add("Null");
        try{
            while (category_query.next()){
                String category = category_query.getString("category");
                categories.add(category);
            }
            //Convert List to array
            arrayCategories = categories.toArray(new String[0]);

            category_list.setModel(new DefaultComboBoxModel<>(arrayCategories));
        }catch(SQLException e){
            e.printStackTrace();
        }
    }
    
    //Configures the product_table (JTable) to display product information with specific column names.
    public void table_adjustments(){
        
        DefaultTableModel model_Product = new DefaultTableModel();
        
        model_Product.addColumn("ID");
        model_Product.addColumn("Name");
        model_Product.addColumn("Price");
        model_Product.addColumn("Quantity");
        
        
        TableColumnModel customcolumn = product_table.getColumnModel();
        product_table.setModel(model_Product);
        
        product_table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        product_table.getTableHeader().setReorderingAllowed(false);
        
        customcolumn.getColumn(0).setResizable(false);
        customcolumn.getColumn(0).setPreferredWidth(600);
        
        customcolumn.getColumn(1).setResizable(false);
        customcolumn.getColumn(1).setPreferredWidth(600);
        
        customcolumn.getColumn(2).setResizable(false);
        customcolumn.getColumn(2).setPreferredWidth(600);
        
        customcolumn.getColumn(3).setResizable(false);
        customcolumn.getColumn(3).setPreferredWidth(600);

    }
    
    //Updates the quantity of a product in the shop when a purchase is made.
    public void updateShop(int quantity_left, int quantity_input, int product_id){
        String update_item = "UPDATE Shop SET quantity = " + (quantity_left - quantity_input) + " WHERE id = " + product_id;
        MainProgram.shop_items.executeUpdate(update_item);
        
    }
    //Handles the case when the desired quantity is equal to the available quantity, possibly removing the product from the shop.
    public void emptyInventory(int quantity_left, int quantity_input, int product_id){
        if (quantity_input == quantity_left){
            String remove_item = "DELETE FROM Shop WHERE id = " + product_id;
            MainProgram.shop_items.executeUpdate(remove_item);
        }
    }
    
    //Retrieves the value from a specific row and column of the product_table.
    public Object getValuefromtable(int row){
        return product_table.getValueAt(product_table.getSelectedRow(), row);
    }
    
    //Retrieves the category of a product based on its ID.
    public String getProductCategory(int product_id){
        String product_category = "";
            ResultSet category_set = MainProgram.shop_items.executeQuery("SELECT category FROM shop WHERE id = " + product_id);
            try{
                if (category_set.next()){
                    product_category = category_set.getString("category");
                }
                
            }catch(SQLException e){
                e.printStackTrace();
            }
        return product_category;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cart_button = new javax.swing.JButton();
        end_button = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        product_table = new javax.swing.JTable();
        category_list = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        quantity_enter = new javax.swing.JTextField();
        purchase_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 204, 102));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Category");

        cart_button.setText("Shopping Cart");
        cart_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cart_buttonActionPerformed(evt);
            }
        });

        end_button.setText("End");
        end_button.setToolTipText("");
        end_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                end_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(251, 251, 251)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cart_button, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(end_button, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(30, 30, 30))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(end_button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cart_button)
                        .addContainerGap())))
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Quantity:");

        product_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(product_table);
        product_table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        category_list.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                category_listActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Category:");

        quantity_enter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantity_enterActionPerformed(evt);
            }
        });

        purchase_button.setText("Purchase");
        purchase_button.setToolTipText("");
        purchase_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchase_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(category_list, 0, 194, Short.MAX_VALUE)
                        .addGap(518, 518, 518))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addContainerGap(624, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(quantity_enter, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(purchase_button)
                        .addGap(22, 22, 22))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addGap(1, 1, 1)
                .addComponent(category_list, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(quantity_enter)
                        .addComponent(purchase_button)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quantity_enterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantity_enterActionPerformed
       
    }//GEN-LAST:event_quantity_enterActionPerformed

    //Handles the purchase action. It updates the shop's inventory, updates the shopping cart, and reflects the changes in the GUI.
    private void category_listActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_category_listActionPerformed
        String selected_category = (String) category_list.getSelectedItem();
        DefaultTableModel model = (DefaultTableModel) product_table.getModel();
        model.setRowCount(0);
        
        ResultSet item_Result = MainProgram.shop_items.executeQuery("SELECT * FROM shop WHERE category = '" + selected_category + "'");
   
        try{
            while (item_Result.next()){
                int id = item_Result.getInt("id");
                String name = item_Result.getString("name");
                double price = item_Result.getDouble("price");
                int quantity = item_Result.getInt("quantity");
                
                model.addRow(new Object[]{id,name,price,quantity});
            }
            
        }catch(SQLException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_category_listActionPerformed

    private void purchase_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchase_buttonActionPerformed
        if (product_table.getSelectedRow()>= 0){
            int product_id = (int) getValuefromtable(0);
            String product_name = getValuefromtable(1).toString();
            Double product_price = (Double) getValuefromtable(2);
            String product_category = getProductCategory(product_id);
          
            int quantity_left = (int) getValuefromtable(3);
            int quantity_input = 0;
           
            try{
                quantity_input = Integer.parseInt(quantity_enter.getText());
            }catch(NumberFormatException n){
                JOptionPane.showMessageDialog(this, "Please enter a valid number");
                return;
            }
            
            if (quantity_input != 0){
                if (quantity_input > quantity_left){
                    JOptionPane.showMessageDialog(this, "Not enough in Stock");
                }else{
                    updateShop(quantity_left, quantity_input, product_id);
                    this.category_listActionPerformed(evt);
                    
                    emptyInventory(quantity_left, quantity_input, product_id);
                    this.category_listActionPerformed(evt);

                    String already_query = "SELECT name FROM shoppingcart WHERE id = " + product_id;
                    ResultSet checkResult = MainProgram.shopping_cart.executeQuery(already_query);
                    
                    try{
                        if (!checkResult.next()){
                            String shopping_columns = " (id, name, price, quantity, category)";
                            String insert_cart = "(" + product_id + ", '" + product_name + "', " + product_price + ", " + quantity_input + ", '" + product_category + "')";
                            MainProgram.shopping_cart.insertTable(insert_cart, "shoppingcart", shopping_columns);
                        }else{
                            String insert_cart = "UPDATE shoppingcart SET quantity = quantity + " + quantity_input + " WHERE id = " + product_id;
                            MainProgram.shopping_cart.executeUpdate(insert_cart);
                        }
                        
                    }catch(SQLException e){
                        e.printStackTrace();
                    }
                }
            }else{
                JOptionPane.showMessageDialog(this, "Please enter a valid number");
            }  
        }else{
            JOptionPane.showMessageDialog(this, "Please select a product");
        }
    }//GEN-LAST:event_purchase_buttonActionPerformed

    //Navigates to the shopping cart screen.
    private void cart_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cart_buttonActionPerformed
        new ShoppingCart_Screen().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_cart_buttonActionPerformed
    // Exits the program by closing database connections and terminating the application.
    private void end_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_end_buttonActionPerformed
        end_program();
    }//GEN-LAST:event_end_buttonActionPerformed

    //Closes database connections and exits the application.
    public void end_program(){
        MainProgram.signup_list.closeConnection();
        MainProgram.shopping_cart.closeConnection();
        MainProgram.shop_items.closeConnection();
        System.exit(0);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Shop_Screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Shop_Screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Shop_Screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Shop_Screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Shop_Screen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cart_button;
    private javax.swing.JComboBox<String> category_list;
    private javax.swing.JButton end_button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable product_table;
    private javax.swing.JButton purchase_button;
    private javax.swing.JTextField quantity_enter;
    // End of variables declaration//GEN-END:variables
}
